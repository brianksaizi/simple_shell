#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>

#define MAX_ARGS 100 // Maximum number of arguments
#define MAX_PATH 1024 // Maximum path length

/**
 * split_line - Split a command line into arguments
 * @line: The input command line
 * @args: An array to store the arguments
 *
 * Return: The number of arguments
 */
int split_line(char *line, char *args[])
{
    int arg_count = 0;
    char *token;
    char *saveptr;

    token = strtok_r(line, " ", &saveptr);

    while (token != NULL && arg_count < MAX_ARGS)
    {
        args[arg_count++] = token;
        token = strtok_r(NULL, " ", &saveptr);
    }

    return arg_count;
}

/**
 * execute_command - Execute a single command
 * @command: The command to be executed
 * @success: Pointer to a variable to indicate command success
 *
 * Return: 0 on success, -1 on failure
 */
int execute_command(char *command, int *success)
{
    char *args[MAX_ARGS];
    int arg_count = split_line(command, args);
    int status = 0;

    pid_t child_pid = fork();

    if (child_pid == -1)
    {
        perror("fork");
        return -1;
    }

    if (child_pid == 0) /* Child process */
    {
        /* Check if the command exists in the PATH */
        char *path = getenv("PATH");
        char *token = strtok(path, ":");

        while (token != NULL)
        {
            char cmd_path[MAX_PATH]; // Adjust the buffer size as needed
            snprintf(cmd_path, sizeof(cmd_path), "%s/%s", token, args[0]);

            if (access(cmd_path, X_OK) == 0)
            {
                /* Execute the command with full path */
                if (execve(cmd_path, args, NULL) == -1)
                {
                    perror("execve");
                    exit(EXIT_FAILURE);
                }
            }

            token = strtok(NULL, ":");
        }

        /* If command is not found, exit the child process */
        exit(EXIT_FAILURE);
    }
    else /* Parent process */
    {
        wait(&status);
        if (WIFEXITED(status))
        {
            if (WEXITSTATUS(status) == 0)
            {
                *success = 1; // Command succeeded
            }
            else
            {
                *success = 0; // Command failed
            }
        }
    }

    return 0;
}

/**
 * main - Entry point of the simple shell
 *
 * Return: Always 0 (success)
 */

int main(void)
{
    char *command = NULL;
    size_t command_size = 0;
    ssize_t read_bytes;
    char current_dir[MAX_PATH];

    while (1)
    {
        if (getcwd(current_dir, MAX_PATH) == NULL)
        {
            perror("getcwd");
            exit(EXIT_FAILURE);
        }

        printf("%s$ ", current_dir);
        fflush(stdout);

        read_bytes = getline(&command, &command_size, stdin);
        if (read_bytes == -1)
        {
            if (feof(stdin)) /* End of file (Ctrl+D) */
            {
                free(command);
                putchar('\n');
                exit(EXIT_SUCCESS);
            }
            perror("getline");
            exit(EXIT_FAILURE);
        }

        if (read_bytes > 0 && command[read_bytes - 1] == '\n')
            command[read_bytes - 1] = '\0'; /* Remove newline character */

        // Split the input line into multiple commands based on semicolon (;)
        char *token = strtok(command, ";");
        int success = 1; // Initialize success flag

        while (token != NULL)
        {
            // Execute each command
            if (execute_command(token, &success) == -1)
            {
                perror("execute_command");
                exit(EXIT_FAILURE);
            }

            // Check for logical operators (&& and ||)
            token = strtok(NULL, ";");
            if (token != NULL)
            {
                if (strcmp(token, "&&") == 0 && success == 0)
                {
                    // Skip the next command if the previous one failed
                    token = strtok(NULL, ";");
                }
                else if (strcmp(token, "||") == 0 && success == 1)
                {
                    // Skip the next command if the previous one succeeded
                    token = strtok(NULL, ";");
                }
            }
        }
    }

    return 0;
}
