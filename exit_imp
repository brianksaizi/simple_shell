#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

/**
 * main - Entry point for the simple shell
 *
 * Return: Always 0
 */
int main(void)
{
    char *command = NULL;
    size_t command_size = 0;
    ssize_t read_bytes;
    int status;

    while (1)
    {
        printf(":) ");
        fflush(stdout);

        read_bytes = getline(&command, &command_size, stdin);
        if (read_bytes == -1)
        {
            if (feof(stdin)) /* End of file (Ctrl+D) */
            {
                free(command);
                putchar('\n');
                exit(EXIT_SUCCESS);
            }
            perror("getline");
            exit(EXIT_FAILURE);
        }

        if (read_bytes > 0 && command[read_bytes - 1] == '\n')
            command[read_bytes - 1] = '\0'; /* Remove newline character */

        if (strcmp(command, "exit") == 0)
        {
            free(command);
            exit(EXIT_SUCCESS);
        }

        pid_t child_pid = fork();

        if (child_pid == -1)
        {
            perror("fork");
            free(command);
            exit(EXIT_FAILURE);
        }

        if (child_pid == 0) /* Child process */
        {
            /* Check if the command exists in the PATH */
            char *path = getenv("PATH");
            char *token = strtok(path, ":");

            while (token != NULL)
            {
                char cmd_path[1024]; // Adjust the buffer size as needed
                snprintf(cmd_path, sizeof(cmd_path), "%s/%s", token, command);

                if (access(cmd_path, X_OK) == 0)
                {
                    /* Execute the command with full path */
                    if (execve(cmd_path, &command, NULL) == -1)
                    {
                        perror("execve");
                        free(command);
                        exit(EXIT_FAILURE);
                    }
                }

                token = strtok(NULL, ":");
            }

            /* If command is not found, exit the child process */
            exit(EXIT_FAILURE);
        }
        else /* Parent process */
        {
            wait(&status);
            if (WIFEXITED(status) && WEXITSTATUS(status) == 127)
            {
                fprintf(stderr, "Command not found: %s\n", command);
            }
        }
    }

    return (0);
}

