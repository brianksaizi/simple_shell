#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>

#define MAX_ARGS 100 // Maximum number of arguments

/**
 * split_line - Split a command line into arguments
 * @line: The input command line
 * @args: An array to store the arguments
 *
 * Return: The number of arguments
 */
int split_line(char *line, char *args[])
{
    int arg_count = 0;
    char *token;
    char *saveptr;

    token = strtok_r(line, " ", &saveptr);

    while (token != NULL && arg_count < MAX_ARGS)
    {
        args[arg_count++] = token;
        token = strtok_r(NULL, " ", &saveptr);
    }

    return arg_count;
}

/**
 * main - Entry point of the simple shell
 *
 * Return: Always 0 (success)
 */

int main(void)
{
    char *command = NULL;
    size_t command_size = 0;
    ssize_t read_bytes;
    int status = 0; // Default exit status

    while (1)
    {
        printf("$ ");
        fflush(stdout);

        read_bytes = getline(&command, &command_size, stdin);
        if (read_bytes == -1)
        {
            if (feof(stdin)) /* End of file (Ctrl+D) */
            {
                free(command);
                putchar('\n');
                exit(status);
            }
            perror("getline");
            exit(EXIT_FAILURE);
        }

        if (read_bytes > 0 && command[read_bytes - 1] == '\n')
            command[read_bytes - 1] = '\0'; /* Remove newline character */

        if (strcmp(command, "exit") == 0)
        {
            free(command);
            exit(status);
        }
        else if (strncmp(command, "exit ", 5) == 0)
        {
            // Check for 'exit ' followed by an integer
            char *arg = command + 5; // Skip 'exit ' prefix
            int arg_value = atoi(arg);

            if (arg_value >= 0)
                status = arg_value;
        }
        else if (strncmp(command, "setenv ", 7) == 0)
        {
            // Syntax: setenv VARIABLE VALUE
            char *arg = command + 7; // Skip 'setenv ' prefix
            char *var_name = strtok(arg, " ");
            char *var_value = strtok(NULL, " ");

            if (var_name != NULL && var_value != NULL)
            {
                if (setenv(var_name, var_value, 1) == -1)
                {
                    perror("setenv");
                    fprintf(stderr, "Failed to set environment variable: %s\n", var_name);
                }
            }
            else
            {
                fprintf(stderr, "Usage: setenv VARIABLE VALUE\n");
            }
        }
        else if (strncmp(command, "unsetenv ", 9) == 0)
        {
            // Syntax: unsetenv VARIABLE
            char *arg = command + 9; // Skip 'unsetenv ' prefix
            char *var_name = strtok(arg, " ");

            if (var_name != NULL)
            {
                if (unsetenv(var_name) == -1)
                {
                    perror("unsetenv");
                    fprintf(stderr, "Failed to unset environment variable: %s\n", var_name);
                }
            }
            else
            {
                fprintf(stderr, "Usage: unsetenv VARIABLE\n");
            }
        }
        else
        {
            char *args[MAX_ARGS];
            int arg_count = split_line(command, args);

            pid_t child_pid = fork();

            if (child_pid == -1)
            {
                perror("fork");
                free(command);
                exit(EXIT_FAILURE);
            }

            if (child_pid == 0) /* Child process */
            {
                /* Check if the command exists in the PATH */
                char *path = getenv("PATH");
                char *token = strtok(path, ":");

                while (token != NULL)
                {
                    char cmd_path[1024]; // Adjust the buffer size as needed
                    snprintf(cmd_path, sizeof(cmd_path), "%s/%s", token, args[0]);

                    if (access(cmd_path, X_OK) == 0)
                    {
                        /* Execute the command with full path */
                        if (execve(cmd_path, args, NULL) == -1)
                        {
                            perror("execve");
                            free(command);
                            exit(EXIT_FAILURE);
                        }
                    }

                    token = strtok(NULL, ":");
                }

                /* If command is not found, exit the child process */
                exit(EXIT_FAILURE);
            }
            else /* Parent process */
            {
                wait(&status);
                if (WIFEXITED(status) && WEXITSTATUS(status) == 127)
                {
                    fprintf(stderr, "Command not found: %s\n", args[0]);
                }
            }
        }
    }

    return (0);
}
