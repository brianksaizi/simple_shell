#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define READ_SIZE 1024 // Adjust the buffer size as needed

/**
 * custom_getline - Read a line of text from the standard input
 *
 * Return: A pointer to the read line, or NULL if an error occurs or EOF is reached
 */
char *custom_getline(void)
{
    static char buffer[READ_SIZE];
    static char *buffer_ptr = buffer;
    static ssize_t bytes_remaining = 0;

    char *line = NULL;
    ssize_t line_size = 0;
    ssize_t bytes_read;

    while (1)
    {
        if (bytes_remaining <= 0)
        {
            bytes_read = read(STDIN_FILENO, buffer, sizeof(buffer));
            if (bytes_read <= 0)
                break;
            buffer_ptr = buffer;
            bytes_remaining = bytes_read;
        }

        char c = *buffer_ptr++;
        bytes_remaining--;

        if (c == '\n' || c == EOF)
        {
            if (line_size == 0 && c == EOF)
                return NULL; // End of file

            if (c == '\n')
                line_size++; // Include the newline character

            line = realloc(line, line_size + 1);
            if (line == NULL)
            {
                perror("realloc");
                exit(EXIT_FAILURE);
            }

            line[line_size - 1] = '\0'; // Null-terminate the line
            return line;
        }

        line = realloc(line, line_size + 1);
        if (line == NULL)
        {
            perror("realloc");
            exit(EXIT_FAILURE);
        }

        line[line_size++] = c;
    }

    if (line != NULL)
        free(line);

    return NULL;
}

/**
 * main - Entry point of the simple shell
 *
 * Return: Always 0 (success)
 */

int main(void)
{
    char *line;

    while (1)
    {
        printf("$ ");
        fflush(stdout);

        line = custom_getline();
        if (line == NULL)
        {
            putchar('\n');
            break;
        }

        // Process the input line here

        free(line);
    }

    return (0);
}
